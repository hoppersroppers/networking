{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction Hopper's Roppers is a website dedicated to providing the best training possible for students who are new to the field. One of the ways that we do this is through a series of free courses. This is the full text of our Practical Networking course. This course is all about getting hands on with networking tools to learn networking concepts. Guarantee you won't find something better for building mental models. This site is generated from a course hosted at: [https://www.roppers.org/courses/networking] All the material is available here, but in order to get the full benefits of our course we recommend registering so that we can track your progress, grade your submissions, and provide feedback and support when you need it. If you have any questions, hit us on Twitter @roppersacademy. If you have recommended changes or feedback, this is all available on GitHub for anyone to submit issues or pull requests. Thanks for the help! Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"Intro/0-Introduction.html":{"url":"Intro/0-Introduction.html","title":"Introduction","keywords":"","body":"Introduction This course will teach you the base knowledge required to become a networking stud and will guide you through a variety of networking CTF challenges. You will do a bunch of packet capture problems, some packet crafting, and a few other miscellaneous networking shenanigans. It's hilariously practical, and ignores nearly all the finer parts of networking... sorry. We will spend a little time going over the fundamentals, but most of the time will be wrapping your head around how to make the packets dance and what it looks like going over the wire. If you want an academic view into the protocols and how packets bop around, take a college course or read a book. This course is for rolling up your sleeves and getting your hands dirty. Welcome to the show! - Dennis Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"Intro/1-WhyNetworkingAndwhysopractical.html":{"url":"Intro/1-WhyNetworkingAndwhysopractical.html","title":"Why Networking And why so practical","keywords":"","body":"Why Networking? And why so practical? Networking is hands down the most important thing to understand in security, and still, people just kind of fumble through it. One of the reasons this stuff is so hard is because most people just don't spend enough time with it to get an innate knowledge of what is going on, which makes things hard to conceptualize. The other reason, and I think the main reason, is because all the courses about networking focus on memorizing random things and doing calculations, but don't spend any time looking at packets or generating packets. It's like if you were trying to learn how to be a carpenter by looking at furniture. Stupid. People waste too much damn time \"learning\" networking. This course is here to fix that. Build your mental models now, learn what is actually happening, then save the memorization for later. Everything is easier when you understand the context. Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"Intro/2-MemorizationandtheLackThereof.html":{"url":"Intro/2-MemorizationandtheLackThereof.html","title":"Memorization and the Lack Thereof","keywords":"","body":"Memorization and the Lack Thereof This is a bit of a rant, but hopefully you appreciate it. Memorizing things seems like a good idea. You save some time because you can recall it faster, you seem smarter, you don't have to carry around cheat sheets or google things... the list of benefits is... honestly pretty short. Now let me go into the downsides: It is worse to be wrong and fast than right and slow. In computing, knowledge is literally always at your fingertips. Having the wrong things \"memorized\" can cause serious problems if you do something that breaks a network (especially if you are remote and not standing in the same room as the computer you are \"fixing\". Using cheat sheets completely avoids this problem. If you are implementing something, you use the specification. Full stop. No negotiating. Why memorize a spec if you can look it up and know what it needs to be. The time required to memorize these things is more than the time it takes to be good at things. Don't memorize, take notes, make cheat sheets, and always be willing to get your hands dirty. There's no shame in google, but there is shame in being bad at networking. So don't be like everyone who has \"taken a networking class in college\" and couldn't route their way out of a paper bag, but for a 4 month period could tell you all the common port numbers. Learn how to bend packets and make them dance, and look up the music as you go along. Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"NetworkingOverview/0-UnderstandThatItIsHard.html":{"url":"NetworkingOverview/0-UnderstandThatItIsHard.html","title":"Understand That It Is Hard","keywords":"","body":"Understand That It Is Hard Everything in computing is difficult, but networking is among the hardest. The reason for this is fairly simple: More nodes external to you means more complexity, especially because it adds complexity that you do not control. There are hundreds of ways why two computers can find themselves unable to talk to eachother. Perhaps they are not turned on, or they aren't plugged into the ethernet cord. Perhaps the ethernet cord is dropping packets on the wire. Perhaps the wifi is getting interrupted. Perhaps there is a firewall at the router that is blocking inbound connections. Perhaps there is a firewall on the computer. Maybe the sockets aren't open, or they are speaking different versions of the same protocol. Maybe the protocol is fine but the application is buggy. Maybe the application is working as intended but is configured to ignore these connections, and you have to change the configuration. Maybe the Chinese government is pretending to be the other computer and when you connect, you are actually routing to them, but instead of Man-In-The-Middle-ing you, they set up the script wrong and the operator who set it up is being yelled at by his boss for messing up for the 5th time this week and this time there is going to be formal paperwork and he just can't keep bringing his personal problems into work and using it as an excuse when he mistypes IP addresses. So it is complicated. On the plus side, networking is based on computers, and computers are based on physics, which means we understand most of it. If something is wrong with your networking, it's probably user error, at some stretch of the line. Most of the time, it's your fault (Remember that). Sometimes it is someone else's fault. That's when you can send an email and help them fix it. Very few things in networking are \"undocumented\". All of networking is based around agreed upon standards from documents named RFCs. These provide literally every piece of information required to send, receive, and understand any protocol. Any time you are trying to understand a protocol, the answer is in the RFC. That doesn't mean go straight to the RFC, just like you shouldn't go straight to the man page. Wikipedia has great intros to many common protocols, and always remember, you are not the first person to run into a problem. Google is your friend, as always. Documentation only goes so far, sometimes you have to look at the ground truth, which is the packets going over the wire. Finally, DNS is always the problem. Unless it's an old ethernet cable leaking packets (yes that is a thing and good luck diagnosing that one). This is a massive field, and nobody will ever be an expert in all of it. You will however, become good enough to do whatever you need to do with it, and that is all anybody asks of anyone on the internet. Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"NetworkingOverview/1-HowtoWatchVideos.html":{"url":"NetworkingOverview/1-HowtoWatchVideos.html","title":"How to Watch Videos","keywords":"","body":"How to Watch Videos If you've spent any time on the other courses on this site, you'll know I am generally not a fan of videos. However, there are a few times when videos are great, like right now. If you don't know much about a subject, and you want to sort of get an idea of something sort of fast, videos are a great way to build up some sort of context. You won't know the material, and it won't totally make sense, but it's a great start. So without further ado, I want you to watch the videos in this section with the following rules on active listening: Pause the video anytime you hear something you've never heard before and take some notes. If the section made absolutely no sense, roll it back and listen to it again and take more notes. If it still doesn't make sense, move on with your life, and the video. This pausing/note-taking should occur very frequently. I'd say it should make watching the video take at least 1.25 - 1.5 times longer. Any more than that and you are wasting time trying to understand. Remember, we aren't looking for even 80% understanding, more like 50%. At the end of the video, decide if anything in your notes you fundamentally don't understand so completely you need to go google it. If you can fake it, or at least guess at what it means, move forward. You'll figure it out as you go, no need to waste time on something that will be covered later. If you do these things you will get more out of videos than ever before, which won't be much, but it will be enough to put things into context the next time you see them. Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"NetworkingOverview/2-ComputerNetworksCrashCourse.html":{"url":"NetworkingOverview/2-ComputerNetworksCrashCourse.html","title":"Computer Networks Crash Course","keywords":"","body":"Computer Networks Crash Course So obviously a 12 minute video won't teach you everything you need, but I think it is a great way to get our brains tuned to what we will be learning about over the rest of the course. Think of it like scaffolding, except, instead of starting from the bottom, in this case we are using this video to plan where the scaffolding goes, and how high. It's good material, but don't get too distracted and keep watching, not all of the videos in this series are as useful. Take some notes and keep moving, don't worry about perfect understanding. Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"NetworkingOverview/3-OSIModelandEncapsulation.html":{"url":"NetworkingOverview/3-OSIModelandEncapsulation.html","title":"OSI Model and Encapsulation","keywords":"","body":"OSI Model and Encapsulation The OSI Model (aka the Open Systems Interconnection model but you'll never see that) is a useful mental model of how internet communications system work and interact with each other. Basically, the idea is that each level of the model is a different part of what is necessary for data to be transferred from one place to another. We will learn all about it as we go, so don't worry about memorizing anything... yet. The competitor to OSI is the TCP/IP model, which is basically the same thing, but with less layers. It all shows the same thing, just with different levels of specificity. Encapsulation One useful thing we can use those models for is to visualize how encapsulation works. Encapsulation is the process of wrapping a piece of data in the routing information required to pass to the next level of the networking stack. Once it gets to the bottom of the stack at the physical layer and is actually sent across the network, once it is received \"de-encapsulation\" occurs, and each level of encapsulation is removed. Eventually, the data, as sent from the first computer finally reaches its destination. What does that mean? How does it work? Don't worry for now, you'll be great at it soon enough. Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"NetworkingOverview/4-ALittleReading.html":{"url":"NetworkingOverview/4-ALittleReading.html","title":"A Little Reading","keywords":"","body":"A Little Reading Read this on An Introduction to Networking Terminology, Interfaces, and Protocols . Take time to make sure all of it makes sense, sort of. Don't really stress about it. Then read this on Routing Tables What is an interface? What is IPV4 vs IPV6? What is a MAC address? How do routing tables work? What is a protocol? What are some common protocols? Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"NetworkingOverview/5-BasicsofNetworking.html":{"url":"NetworkingOverview/5-BasicsofNetworking.html","title":"Basics of Networking","keywords":"","body":"Basics of Networking I am going to handwave a bunch of things, just trust me, what I'm handwaving doesn't matter that much for now. This is all part of some kind of plan. IP Addresses and Basic Networking You might have heard the word IP address before, but we aren't going to dive too deep into it yet. Just think of it as the way other computers know who you are, and based off of a complicated routing system, how computers in between you and whatever you are talking to knows how to transport things back and forth. There will be plenty more on this in the Networking Course which you are going to do next anyway, so don't worry about how it works. To find out your IP address, run the command \"ip addr\". This will print out a list of things called interface and some other stuff, don't worry too much. For now, focus on the IP addresses, the items in the form 127.0.0.1, 192.168.20.45, 182.16.10.100, 10.2.5.24 etc.... addresses in that form are known as IPV4 addresses. (There's another format known as IPV6 that looks like but we aren't going to worry about them right now) You should only have a few of them, so look for your 127.0.01 address. This is called your localhost, aka, your computer's local IP address. It is completely internal, and all computers have a localhost at 127.0.0.1. This means that you can't talk to someone else's localhost address and it is non-routable. You should have at least one more IP address listed, likely in the format 10.x.x.x, 192.168.x.x, or 172.x.x.x. These address ranges are known as \"local\" addresses. Long story short, there aren't enough IPV4 addresses. If you want to read more about this, the wikipedia article is decent. To get around the lack of IPV4 addresses, most private networks use these local addresses for all the computers on it, so that they don't need to own all the IP address space required for all of their computers (what? people own IP addresses? Yeah it's super complicated, we're gonna ignore that for now. There's also something called IPv6 which looks like this 2001:db8::8a2e:370:7334 but we are going to ignore all of those addresses for now) So when you see those local IPV4 addresses, what you are seeing is the IPV4 address your network has assigned to you to use locally (and only locally). Routing How do we connect to the internet then? Well, there's some magic called routing we aren't going to worry about too much for now, other than to be confident that it works. Let's trace our route to google.com to confirm that routing is working properly. In linux, this uses the command traceroute. Windows uses tracert. $ traceroute google.com You should see a nice fancy print out of all the servers you've hopped across, starting with your gateway router and ending with the google.com server. This family of commands is especially useful for troubleshooting networking problems. (For a fun hack, try traceroute bad.horse. Gotta love abusing protocols to do cool things) So what does google see you as when you make a request? I recommend a quick trip to a website to find that out! Click here to find your public IP. As you can see, your public IP is completely different than what your local IP is when you run ip addr. The reason for that is something called NAT, or Network Address Translation which is a method of mapping one IP address to another by modifying packets while they are in transit. It's hella complicated how it works, but what matters to us, the end users, is that our local address is stored by some NAT server which ensures that any responses to traffic from us that leaves our network, comes back to our locally assigned IP. On the other hand, nobody should be able to connect into a box behind NAT because they will not know the local IP address and either way, a local address shouldn't be routed across the internet. So just remember for now, NAT allows connections out and responses back, but does not allow connections in. (Just smile and wave, nobody understands NAT, but we'll go over it a bit more in the Networking Course). How does routing work? How do the packets actually get from Point A to Point B? Patience my friend. Later in the course in the web section we will talk about it. VM Networking So how does this all tie back into practical application? Well your Virtualization Software will have an option to switch your VM between a NAT'd IP address and a Bridged IP address. I don't spend much time on Windows in this course, but run the command ipconfig in your Windows CMD prompt to get your host computer's IP address. Bridged IP addresses are IP addresses assigned by your local router, which will be NAT'd by the router when you try to connect out. NAT'd IP addresses are IP addresses assigned by your virtualization software, which puts that box behind a NAT. This means that if you are NAT'd, another local computer will not be able to connect to you, but if you are Bridged, your IP address will be routable. You're still both behind a router NAT, but it's the same NAT so you'll share the same IP address prefix. Depending on your Virtualization Software, switch between the different networking modes and see how your IP address (and routing) changes. Run the $ ip addr command to check. If you are having trouble switching, assume that it is because Windows Hyper-V is doing bad things (even if you aren't using it). It's possible to fix Hyper-V issues by \"disable network interfaces hyper-v\" (there's your search term), but it's mostly a pain that pops up every once in a while. VMWare Virtual Box Hyper V Don't try to do the HyperV one, it's a nightmare. Just install VMWare. Over the next few sections and the rest of your life think about how changes in your networking setup will effect routing. Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"NetworkingOverview/6-TryHackMeNetworking.html":{"url":"NetworkingOverview/6-TryHackMeNetworking.html","title":"TryHackMe Networking","keywords":"","body":"TryHackMe Networking TryHackMe is a company that provides high-quality security training, and some really good stuff is free. As another free fundamentals training site, Roppers and THM are natural enemies and I hate them with the heat of 1000 suns. With that said, I think they teach stuff in an interesting way and I like the way they do things. Your first networking challenge is figuring out how to use OpenVPN to connect to their networks: https://tryhackme.com/access?o=vpn Verify successful connection with this: https://tryhackme.com/room/tutorial Work through these three sections from them What is Networking? - Begin learning the fundamentals of computer networking in this bite-sized and interactive module Introduction to Networking - An introduction to networking theory and basic networking tools Introduction to LAN - Learn about some of the technologies and designs that power private networks Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"NetworkingOverview/7-ChapterSurvey1.html":{"url":"NetworkingOverview/7-ChapterSurvey1.html","title":"Chapter Survey 1","keywords":"","body":"Chapter Survey 1 On a scale of 0 to 10, how likely is it that you would recommend this section to a friend or colleague? Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"HowtoBeGoodatNetworking/0-ReadtheRFC.html":{"url":"HowtoBeGoodatNetworking/0-ReadtheRFC.html","title":"Read the RFC","keywords":"","body":"\"Read the RFC\" This quote is a classic refrain from people who want you to find the answer to networking questions, because in theory, RFCs are the ground truth!! All protocols are required to exactly follow the specification, which means you can be very confident about how things work. RFCs or Request for Comments, is the way that the internet develops standards. Read this to learn more: Lifewire: What is an RFC This is short and sweet but applies to just about any technical document: StackOverflow: How to Read RFCs and Similar Docs Skim this RFC to answer a few questions: https://www.rfc-editor.org/rfc/rfc7231.txt Is this an official RFC? What RFC did it update? What does this RFC give guidance on how to do What is a GET request and what does it look like? What is a User-Agent? Submit your answers to the questions. Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"HowtoBeGoodatNetworking/1-WikipediaandtheBible.html":{"url":"HowtoBeGoodatNetworking/1-WikipediaandtheBible.html","title":"Wikipedia and the Bible","keywords":"","body":"Wikipedia and the Bible Wikipedia \"Wikipedia as a recommended resource! Filthy casual! I read the RFCs\" - Someone who doesn't get it. Hear me out. If I am trying to understand what a protocol is, how it works, what it does, I read Wikipedia and you should too. There is no reason to fight through pages of arcane nonsense when it has been distilled into the perfect amount of detail. When you are working with a protocol for the first time, or just need a refresher (I basically re-read protocols every time I touch them so I don't have to rely on memory), just read the Wikipedia entry. Helpfully, all the RFCs are listed at the bottom... It's like maybe these are supplementary resources, meant to be used together? Skim the DNS Wikipedia page to check out what Wikipedia has to offer. Don't read the whole thing (unless you really want to), but just see that this would have been a much easier place to answer the questions you previously answered using the RFCs. TCP-IP Bible The TCP-IP Guide by NoStarch Press is absolutely amazing. You should buy it at some point. I had a hard copy for a while, but I left it behind with my security team when I graduated. I hope it's getting good use now. Anyway, any time you have a question about a protocol, find it here, and do some Google. Together, you are unstoppable. There are other similar books, but this is my recommendation for beginners. Cheatsheets I alluded to it earlier, but take copious notes and find/make cheatsheets. The more resources you have scattered around your desk and on your computer, the better you are at networking. I guarantee it. Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"HowtoBeGoodatNetworking/2-ReadtheRFCPart2.html":{"url":"HowtoBeGoodatNetworking/2-ReadtheRFCPart2.html","title":"Read the RFC Part 2","keywords":"","body":"\"Read the RFC\" Part 2 One of the best things about RFCs is that they will have information you'd never be able to find on Wikipedia or a normal reference. Skim the DNS RFC to answer some obscure questions. I won't give you the RFC for this, go find it. What is the TC bit? Would you describe the TC bit as... boolean? What is a bool? In the header of a message, how many bits from the ID field is the TC bit? Congratulations, you are, at this exact moment in time, the world's 3rd or 4th most knowledgeable person about TC bits. Okay now you are about 10th. Alright now, time to completely forget it. There's no need to keep that kind of stuff floating in your brain when you can just look it up. Let's move on to learning more important things, like reading the \"Standard for the Transmission of IP Datagrams on Avian Carriers\" for fun. I promise this one is shorter. https://www.rfc-editor.org/rfc/rfc1149.txt Submit your answers. Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"HowtoBeGoodatNetworking/3-PacketsandWireshark.html":{"url":"HowtoBeGoodatNetworking/3-PacketsandWireshark.html","title":"Packets and Wireshark","keywords":"","body":"Packets and Wireshark Remember when I said that RFCs are the specifications and thus, are the ground truth? I lied. Humans implement the specs, and humans are fallible. Physics always has a say as well. Which means that your packets can do whatever they want, and there is a decent chance that they will. When that happens, the only way to go is to get to the truth, and the ground truth is the content of the encapsulated packets. First, we have to learn what a packet capture is. A packet capture is the recording of all information that goes across your network. It is possible to record all information that crosses a specific point in the path and then play it back so that you can see everything that happened. Plus you can look at the content of the encapsulated packets, which means you can look for things that are going wrong. Packet captures usually have the file extension .pcap or .pcapng, and are primarily opened with a tool named Wireshark. To look at packet content, we use Wireshark, a badass tool that has existed for quite a while now. Wireshark is an amazing tool, install it in both your native Windows and your VM. To start learning it we will use TryHackMe's module: Wireshark the Basics - Learn the basics of Wireshark and how to analyse protocols and PCAPs Complete that. Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"HowtoBeGoodatNetworking/4-Scriptingandtshark.html":{"url":"HowtoBeGoodatNetworking/4-Scriptingandtshark.html","title":"Scripting and tshark","keywords":"","body":"Scripting and tshark Even better than viewing packets in a GUI is playing with them using a scripting language. We're hackers, so we are supposed to use the CLI (honestly though, Wireshark is better for like... 99% of all situations that don't involve CLI only access or insanely large pcaps). The tool of choice for this is named tshark. tShark is a command line tool to do the same things that Wireshark does, but all in python. It is pretty awesome and allows you to script complex activities that you could never do in Wireshark. Follow this tutorial: https://hackertarget.com/tshark-tutorial-and-filter-examples/ To create your initial pcap, run the command \"tshark -i wlan0 -w capture-output.pcap\" and then visit https://hoppersroppers.org and http://zombo.com/. Then stop the capture with a ctrl-c. Afterwards continue through the rest of the tutorial using the pcap you recorded. Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"HowtoBeGoodatNetworking/5-ChapterSurvey2.html":{"url":"HowtoBeGoodatNetworking/5-ChapterSurvey2.html","title":"Chapter Survey 2","keywords":"","body":"Chapter Survey 2 On a scale of 0 to 10, how likely is it that you would recommend this section to a friend or colleague? Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"LinuxCommands/0-BasicCommands.html":{"url":"LinuxCommands/0-BasicCommands.html","title":"Basic Commands","keywords":"","body":"Basic Commands Capture Packets (Without Wireshark) You won't always have Wireshark or tshark around, but you will always have a need to capture packets. That's where tcpdump comes in. It comes pre-installed on many Linux distros and has all of the same functionality and most of the same command line args for filtering. To get started, check out your list of available interfaces with: $ tcpdump -D 1.wlp3s0b1 [Up, Running] 2.any (Pseudo-device that captures on all interfaces) [Up, Running] 3.lo [Up, Running, Loopback] 4.docker0 [Up] 5.eno1 [Up] 6.nflog (Linux netfilter log (NFLOG) interface) 7.nfqueue (Linux netfilter queue (NFQUEUE) interface) 8.usbmon1 (USB bus number 1) 9.usbmon2 (USB bus number 2) 10.usbmon3 (USB bus number 3) 11.usbmon4 (USB bus number 4) This will return a list of names that probably don't mean anything to you. So what are those interfaces anyway? Basically, they're meant to be human readable names for the various networking devices on the system. eth0, while a classic, has been sadly retired in favor of the wlp/enp family of names. There's some complexity here about that scattered series of letters and numbers being a predictable name that means something but whatever, just know whatever looks like that is going to be your public-facing interface. Loopback or lo will be your local interface for packets that never leave your machine, and all the other interfaces are usually not something you'll deal with unless you're doing some fairly specialized work. The exception is \"any\" which, you guessed it, can listen on all interfaces at once. To capture packets using tcpdump, run the command $ tcpdump -i \\ Use $ tcpdump -i \\ -w \\ to write to a file. Then you can later load that into Wireshark and analyze it. Figure Out Your IP Address(es) Speaking of things that have been retired, the Linux world ran on the command 'ipconfig' for many years, but it has recently been deprecated in favor of the command 'ip'. I don't care enough about internet drama to tell you more, but it was a big deal to people who don't leave their house enough. Anyway, ip has a lot of use cases and functionality, but the core use of ip is to get the list of addresses for each interface. $ ip addr 1: lo: mtu 65536 qdisc noqueue state UNKNOWN group default link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: eno1: mtu 1500 qdisc fq_codel state link/ether f0:1f:af:05:0b:7d brd ff:ff:ff:ff:ff:ff 3: wlp3s0b1: mtu 1500 qdisc mq state UP link/ether 08:3e:8e:3e:7a:0a brd ff:ff:ff:ff:ff:ff inet 192.168.0.16/24 brd 192.168.0.255 scope global dynamic valid_lft 2441sec preferred_lft 2441sec inet6 2601:14d:8400:2570:6530:9fbe:ccf:4924/64 scope global temporary dynamic valid_lft 7196sec preferred_lft 7196sec inet6 2601:14d:8400:2570:8237:c825:38cf:d790/64 scope global valid_lft 7196sec preferred_lft 7196sec inet6 fe80::e1fe:2a68:230d:e781/64 scope link noprefixroute valid_lft forever preferred_lft forever Here we can see that for lo, loopback, our ip address is 127.0.0.1.... which is also yours, and every other computer on the planet's basically. Because these packets never leave our device, it's fine for everyone to have the same loopback address. eno1 is my local wired ethernet adapter because I am using a real Linux desktop instead of a VM. If you are in a VM, you probably have something that looks like enp65s0, which will be the assigned name of the virtual adapter your VM gave you. The most exciting interface I have right now is wlp3s0b, which if you haven't guessed yet, is a wireless interface. (wl = wireless, en= ethernet). That has an (inet) ipv4 address = 192.168.0.16, an ethernet/link address = 08:3e:8e:3e:7a:0a, and a bunch of ipv6 addresses. There's also some broadcast stuff in there, but you can kind of ignore it for now. Another interesting command is $ ip neigh which returns your ARP cache. 192.168.0.10 dev wlp3s0b1 lladdr f0:ef:86:05:7d:41 REACHABLE 192.168.0.1 dev wlp3s0b1 lladdr 78:d2:94:8f:1a:d3 REACHABLE 192.168.0.18 dev wlp3s0b1 lladdr f0:f0:a4:8d:fb:da STALE fe80::7ad2:94ff:fe8f:1ad3 dev wlp3s0b1 lladdr 78:d2:94:8f:1a:d3 router STALE You can do fancy things with this, but it's not a priority for now. The last thing we will do here is $ ip route which prints your routing tables. There is a ton of information about what this command does, and all of the ip commands I just demonstrated in the man pages... once again proving there is no need to memorize this stuff. You can also use the ip command to change values, whether that is your ip, configure interfaces, or change routes. Don't worry about memorizing things, just google them or check a cheat sheet when they come up. For now, let's quickly change your MAC address! Figure out your external NIC's name with ip addr. Then throughout this, change the $NIC out with the name of your NIC. ## Disable the NIC so you can modify it $ ip link set dev $NIC down ## set new MAC address ## $ ip link set dev $NIC address DE:AD:BE:EF:BA:BE ## Re-enable the NIC $ ip link set dev $NIC up Then run ip addr again. You should see the change reflected. For bonus points, look in Wireshark while this is happening for the ARP request that contains the change! See What Is On Ports (Without Wireshark) Sometimes you don't need wireshark and are just looking for what processes are making connections on your box. This is a great time for some CLI tools. Before we run them, run the command $ nc -lp 1337. After you run the command, go look for the nc process... You should be able to find it! $ netstat --inet -ap $ lsof -i For a pro-tip, anytime you want to look like a hacker, run these commands and you'll have a very cool looking display up. Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"LinuxCommands/1-curlAnalysis.html":{"url":"LinuxCommands/1-curlAnalysis.html","title":"curl Analysis","keywords":"","body":"curl Analysis Read this to learn about how making a web request works: Mozilla: How the Web Works Too bad all the web traffic is encrypted these days with HTTPs, that's super boring. Guess we'll have to go and find a HTTP website to look at for now, but for now, instead of using a web browser, we'll use a command line tool. There are plenty of tools to download a file from the terminal, but I prefer to teach curl as it is able to support the most protocols (and can upload too if you need it). Steps: Begin capturing packets in Wireshark on the correct external interface Run the command ``$ curl http://httpforever.com/ Run the command: ``$ wget http://httpforever.com/ Stop your capture. Assignment: Can you find a DNS request to httpforever.com? What is the filter needed to find it? What is the port you hit the site on? What is the default HTTP port? What happened when the connection started? What filter is needed to see all traffic between the site and you? What did you see if you follow TCP stream? Were you able to see anything? If you did, can you extract the file(s)? What is the difference between the UserAgents in the two requests? Why? What happened when the connection ended? Was there anything else you found interesting? Submit a text file? Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"LinuxCommands/2-nslookupAnalysis.html":{"url":"LinuxCommands/2-nslookupAnalysis.html","title":"nslookup Analysis","keywords":"","body":"nslookup Analysis Next up we have the command nslookup, which allows us to manually resolve domain names to ip addresses. Steps: Begin capturing packets in Wireshark on the correct external interface Run the command ``$ nslookup hoppersroppers.org Stop your capture. Assignment: What is DNS for? What is the default DNS port? Was it the one you used? What is UDP? What did you see if you follow UDP stream? What happened when the connection ended? Why? Was there anything else you found interesting? Submit a text file. Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"LinuxCommands/3-pingAnalysis.html":{"url":"LinuxCommands/3-pingAnalysis.html","title":"ping Analysis","keywords":"","body":"ping Analysis Steps: Begin capturing packets in Wireshark on the correct external interface Run the command ``$ ping hoppersroppers.org Stop your capture. Assignment: What is ICMP? Did it work? If not, there are a ton of reasons why. If it failed, there's a decent chance that there is some sort of firewall blocking you somewhere along the path to hoppersroppers.org. What is the default ICMP port? Is there one? What is ping? What did you see if you look at the connection? Was there anything else you found interesting? Submit a text file. Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"LinuxCommands/4-tracerouteAnalysis.html":{"url":"LinuxCommands/4-tracerouteAnalysis.html","title":"traceroute Analysis","keywords":"","body":"traceroute Analysis Next you are going to learn about a really cool tool called traceroute. Steps: Ensure your VM Networking is set to Bridged Begin capturing packets in Wireshark on the correct external interface Run the command ``$ traceroute hoppersroppers.org Stop your capture and complete the first 5 questions. Change your VM Networking over to NAT Begin capturing packets in Wireshark on the correct external interface Run the command ``$ traceroute hoppersroppers.org When that fails, then run the command $ traceroute -I hoppersroppers.org Stop your capture and complete the rest of the questions. Assignment: What is Bridged Networking in a VM? What filter can you use to only see the traceroute packets? What happened when you ran traceroute? What information can you see in the packets? What changes between each packet? What happens with the TTL? How do you think traceroute works? What happened when the connection ended? Why? What is NAT? What was the difference between the results from the last two runs of traceroute, and why? Check out this link to learn what happens. Was there anything else you found interesting? Submit a text file. Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"LinuxCommands/5-ALittleBitMoreTheory.html":{"url":"LinuxCommands/5-ALittleBitMoreTheory.html","title":"A Little Bit More Theory","keywords":"","body":"A Little Bit More Theory I was too practical there! Now time to recontextualize everything! Read these two resources and take notes. Things should slowly be making more sense. https://www.digitalocean.com/community/tutorials/an-introduction-to-networking-terminology-interfaces-and-protocols https://commotionwireless.net/docs/cck/networking/learn-networking-basics/ Go back to them as you move forward and look at new protocols and capture setups. Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"LinuxCommands/6-NetworkReconnaissance.html":{"url":"LinuxCommands/6-NetworkReconnaissance.html","title":"Network Reconnaissance","keywords":"","body":"Network Reconnaissance Learn about remote systems and networks using some of the tools we have used so far. We go to TryHackMe here for some entertaining labs. Passive Reconnaissance - Learn about the essential tools for passive reconnaissance, such as whois, nslookup, and dig Active Reconnaissance - Learn how to use simple tools such as traceroute, ping, telnet, and a web browser to gather information Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"LinuxCommands/7-ChapterSurvey3.html":{"url":"LinuxCommands/7-ChapterSurvey3.html","title":"Chapter Survey 3","keywords":"","body":"Chapter Survey 3 On a scale of 0 to 10, how likely is it that you would recommend this section to a friend or colleague? Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"PracticalPackets/0-WebBrowsingAnalysis.html":{"url":"PracticalPackets/0-WebBrowsingAnalysis.html","title":"Web Browsing Analysis","keywords":"","body":"Web Browsing Analysis Time to get after it and start looking at things! This is where the rubber meets the road. Start recording packets in Wireshark! Make sure to choose the correct interface. Interfaces are tricky, but basically look for the one probably starting with en or wl with a bunch of traffic. At least in this case! Depending on what you are trying to capture you have to change interfaces... \"lo\" or loopback, is your local interface for packets that never leave your box (which is important for local testing, but not the right place to look for traffic going externally. With Wireshark fired up, you should see all sorts of traffic stacking up in there, probably with a ton of protocols you've never heard of. For now, visit roppers.org and then end your session. Assignment: What filter was required to only see Roppers.org traffic? What protocol was used? What port was used? Were you able to see any information in the browsing session? Why not? Was there anything else that interested you? Damn HTTPs makes sniffing web traffic boring! At least it's secure these days! Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"PracticalPackets/1-netcatAnalysis.html":{"url":"PracticalPackets/1-netcatAnalysis.html","title":"netcat Analysis","keywords":"","body":"netcat Analysis Netcat is known as the \"Swiss Army Knife\" of networking tools. Whatever you want to do, you can probably do it with netcat. It comes pre-installed on most Linux machines, which makes it a common troubleshooting tool. While there are many features, the most common use is that you can use it to send and receive arbitrary data across a network. The way we send data across a network is with things named \"protocols\". Netcat speaks the TCP and UDP protocols, but that doesn't matter all that much right now. Protocols run everything online, but we are going to save learning how they work for later. For this lab, you are going to play around with Wireshark and sockets. Don't rush through it, take your time and experiment. Begin capturing packets in Wireshark on the correct interface. In this case, that means the local \"lo\" interface, rather than your external one. 'Any' works as well. Using pipes and redirectors that we learned about in the last lesson, we can choose the input that is sent via the network, as well as what we do with the data once we receive them. On the command line we can use nc as a short name for the netcat program. $ echo 'Hello World' | nc 127.0.0.1 1337 When we run this first commnd, we take the STDOUT of echo and pipe it as the STDIN of netcat. The first argument for netcat is the IP address we want to send it to, and the second number is the port we want to send it to. Netcat will then send 'Hello World' off to the correct location. Networking is hard, but we will skip a lot of the hard stuff for now. At this time, just know that most computers have an IP address and have thousands of ports. If two computers want to pass data over a network, they have to know the correct IP address and port to send data to. In this case, we are using netcat to send 'Hello World' to IP address 127.0.0.1 to port 1337. IP address 127.0.0.1 is often known as localhost, and is our current computer. You can also write that command as: $ echo 'Hello World' | nc localhost 1337 If you noticed, nothing happened on the command line, which is kind of expected. What happened in Wireshark when you ran the command? Was there some sort of error? Can you see any data? What happened was we tried to send without setting up something to listen! Now we get to see what netcat can really do! Open up a new terminal and set up a listener on localhost port 1337 with this command. $ nc -l 1337 Now you have set up a listener, go and run the first command again from your other terminal to send 'Hello World'. Check it out in Wireshark again! What happened this time?! Look at that! You have NETWORKED!!!!! To stop listening, press ctrl-c. That generally closes out or \"interrupts\" most processes in the terminal. Let's talk about what just happened. First, you set up a \"server\", the listener. Then you had the \"client\" send data to the listener. This is about the most basic client-server setup you can get, but the principles remain generally the same all the way up to the complexity of web pages. Send a File For more fun, we can even send files around using redirectors because of how well Linux handles streams. First modify your listener to output to a file using '>'. Then, use cat to read an existing file into a stream and then use '|' to pass it into netcat. This might require some fiddling for you to get the streams lined up properly. If needed, use Wireshark to make sure things are being sent. Eventually it should work, and you should have transported the file into the new location where your listener was pointing! What's even cooler is that you should be able to use Wireshark to pull that data out of the packets! Alright, so that wasn't magic, though it is pretty cool. Assignment: 1. Submit what you learned from this section. Don't spend too much time on the writeup, I want you to focus on experimenting. Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"PracticalPackets/2-telnetAnalysis.html":{"url":"PracticalPackets/2-telnetAnalysis.html","title":"telnet Analysis","keywords":"","body":"telnet Analysis Telnet Telnet is an old fashioned protocol that usually provides nice and easy shell access to anyone running a telnet server, which is often unauthenticated. It's a hacker's dream! Too bad you don't see many of them these days, but they are common in CTFs, and on critical infrastructure (jokes?). Here's a fun telnet demo to show what it is capable of: $ telnet towel.blinkenlights.nl Hackers gonna hack. And bored people... well they're gonna bored people. Steps : Begin capturing packets in Wireshark on the correct interface Run the command: telnet towel.blinkenlights.nl Once connected, watch for a bit and then end the connection. Assignment: What is the standard telnet port? What happened when the connection started? This might not work if your ISP is blocking telnet. If this didn't work,bask in this glory. What filter is needed to see all traffic between the site and you? What did you see if you follow TCP stream? Were you able to see anything? What are the different protocols that Wireshark dissects for you? What happened when the connection ended? Was there anything else you found interesting? Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"PracticalPackets/3-SSHAnalysis.html":{"url":"PracticalPackets/3-SSHAnalysis.html","title":"SSH Analysis","keywords":"","body":"SSH Analysis Another very important tool is Secure SHell or SSH. They are basically the secure successor to Telnet for providing remote shells. We won't go into the networking specifics of this yet, but SSH is a networking protocol that allows encrypted access to remote computers. How this works in effect is a remote computer, the SSH server, will listen for an incoming connection. The local computer, which is the client we are trying to SSH from, sends a request via the SSH protocol to log in to the SSH server. If the password supplied is correct, the server will then create a shell on the remote computer and then pass back the stream from that shell to the client. From there, the client who just logged in via SSH is able to have access to the remote computer in an encrypted manner. I hand waved a ton of complexity there, but it doesn't matter yet. We'll spend some more time on this in the networking course, but you honestly don't need to know the specifics, I certainly don't. To SSH, you can either use a password or a key. Most of the time you will have a password, and that is what we will focus on in this course. The networking course will have more info on keys and SSH. To use ssh, simply run the command: ssh username@domain.com. There are plenty more options, but this one will get you through 90% of use cases. Steps : Begin capturing packets in Wireshark on the correct interface SSH into : ssh bandit.labs.overthewire.org -p 2220 -l bandit0 with the password bandit0 Once connected, get the first flag and then end your SSH connection. Assignment: What port did you SSH into? What is the standard SSH port? What happened when the connection began? What filter is needed to see all traffic between the site and you? Were you able to see the password? Were you able to see anything? What are the different protocols that Wireshark dissects for you? Was there anything else you found interesting? Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"PracticalPackets/4-LiesDamnLiesandStatistics.html":{"url":"PracticalPackets/4-LiesDamnLiesandStatistics.html","title":"Lies Damn Lies and Statistics","keywords":"","body":"Lies, Damn Lies, and Statistics Steps: Begin capturing on your external interface. Visit hoppersroppers.org with your web browser. Click around for a bit. End the capture. Tasks: Open up the Statistics menu in your Wireshark Check out the Protocol Hierarchy. What are the top 10 protocols listed? Anything interesting in there? Check out the Conversations view. Go to the TCP tab and sort by number of packets sent. Play around with it a bit. What was the largest conversation during this capture? What were the most common endpoints? Roppers is probably first, but what were #2 and #3? There is plenty more in the Statistics Menu so play around a bit and try to use this information to figure out what happened in your browsing session. Submit a text file. Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"PracticalPackets/5-ChapterSurvey4.html":{"url":"PracticalPackets/5-ChapterSurvey4.html","title":"Chapter Survey 4","keywords":"","body":"Chapter Survey 4 On a scale of 0 to 10, how likely is it that you would recommend this section to a friend or colleague? Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"PracticalProgramming/0-JustaBitMoreTheory.html":{"url":"PracticalProgramming/0-JustaBitMoreTheory.html","title":"Just a Bit More Theory","keywords":"","body":"Just a Bit More Theory Finish Cyber Aces Networking: Layer 4 - Transport Layers 5 & 6 - Session and Presentation Layer 7 - Application Inter-Layer Communication & Conclusions This resource is great, but don't read the entire thing. Use it as a brief reference as you go. https://intronetworks.cs.luc.edu/current/html/intro.html Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"PracticalProgramming/1-SimpleSockets.html":{"url":"PracticalProgramming/1-SimpleSockets.html","title":"Simple Sockets","keywords":"","body":"Simple Sockets Sockets are the foundational piece of networking and are pretty damn complicated. On the plus side, we have python, and like all things, python makes them an absolute joy to work with. Work through this tutorial. https://realpython.com/python-sockets/ As you go through, make sure to have Wireshark open and filter on the correct ports so you see the correct data. Experiment with the server and client to see how you can break it and what it looks like in Wireshark when that happens. For your assignment, describe the order of socket setup between a server and a client, and then how the socket closes. Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"PracticalProgramming/2-PythonSimpleHTTPServerandRequests.html":{"url":"PracticalProgramming/2-PythonSimpleHTTPServerandRequests.html","title":"Python Simple HTTP Server and Requests","keywords":"","body":"Python Simple HTTP Server and Requests Every once in a while you need to distribute files to a group of people on a local network or host a webpage, and you think, well, how am I going to do that? Simple Server Python, because they are thoughtful and caring and want us to be happy, comes with a simple HTTP server by default, which we can stand up in seconds. It used to be called SimpleHTTPServer in Python2, but now it is: $python3 -m http.server This will stand up a server that hosts the directory (and all other files under that directory) that you ran the command in. Pretty awesome, super convenient, and somewhat of a security risk (on your local network) if you run it too high in your directory structure and share too many files. In your browser, go to the ip address and port it is running on and look at the files being served! You are able to download whatever you need. Requests Library Now of course, clicking around in a browser isn't hardcore enough for us. Sure, we could use curl or wget to grab it from the CLI, but let's say we want to do some python scripting. Now it is time for one of my favorite libraries, requests. It's an elegant library that lets you do whatever you want to do with HTTP (and HTTPS if you wrap it). Use these docs to write a short script that can grab all the files on your local server and save them. For your assignment, submit the script. Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"PracticalProgramming/3-ScapyandPwntools.html":{"url":"PracticalProgramming/3-ScapyandPwntools.html","title":"Scapy and Pwntools","keywords":"","body":"Scapy and Pwntools Generating arbitrary packets and making connections is pretty easy in Python, but what if.... they were even easier. Here we will introduce two programs to make your life somehow, even easier. Scapy: Scapy is a Python program that enables the user to send, sniff and dissect and forge network packets. This capability allows construction of tools that can probe, scan or attack networks. I will describe scapy as horrifyingly capable and ludicrously complex, but it's way easier than a lot of other ways to generate arbitrary packets and send them across the internet, so we'll call it a win. Check out the docs through the Quick Demo to get an idea of what Scapy is capable of. Experiment with this and look at what you are creating in Wireshark. Pwntools: pwntools is a CTF framework and exploit development library. Written in Python, it is designed for rapid prototyping and development, and intended to make exploit writing as simple as possible. Before we get to exploits though, it provides a really great way to interact with tubes... aka networking. Work through the pwntools tutorials. Installing Pwntools Tubes Basic Tubes Interactive Shells Processes Networking Secure Shell Serial Ports If you want more practice using Pwntools, write a python script to solve the first 5 challenges in Over the Wire Bandit. https://overthewire.org/wargames/bandit/ (Hint: https://github.com/Gallopsled/pwntools-write-ups/blob/master/wargames/overthewire-vortex/level0/win.py ) Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"PracticalProgramming/4-ChapterSurvey5.html":{"url":"PracticalProgramming/4-ChapterSurvey5.html","title":"Chapter Survey 5","keywords":"","body":"Chapter Survey 5 On a scale of 0 to 10, how likely is it that you would recommend this section to a friend or colleague? Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"HackerStuff/0-SecurityFundamentalsNetworking.html":{"url":"HackerStuff/0-SecurityFundamentalsNetworking.html","title":"Security Fundamentals Networking","keywords":"","body":"Security Fundamentals: Networking Over at our Security Fundamentals course, we have an entire section on network security. I highly recommend you work through that before moving forward. Super optional though. Chapter List: Intro to Hostile Networks Protect Your IP Address IP Protections Encryption Metadata Man in the Middle VPNs? Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"HackerStuff/1-Nmap.html":{"url":"HackerStuff/1-Nmap.html","title":"Nmap","keywords":"","body":"Nmap I could make my own material on this one, but instead we will use TryHackMe's because I like it a lot. Nmap - An in-depth look at scanning with Nmap, a powerful network scanning tool Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"HackerStuff/2-FirewallsPortForwardingandiptables.html":{"url":"HackerStuff/2-FirewallsPortForwardingandiptables.html","title":"Firewalls PortForwarding and iptables","keywords":"","body":"Firewalls, Port-Forwarding, and iptables Alright, time for some hacker stuff. I'm not going to get too deep into this, but I am going to give you enough of a vibe of what is going on that you will appreciate how much complexity exists here. First, let's talk iptables. iptables According to the manpage, *\"Iptables and ip6tables are used to set up, maintain, and inspect thetables of IPv4 and IPv6 packet filter rules in the Linux kernel. Several different tables may be defined. Each table contains a number of built-in chains and may also contain user-defined chains. Each chain is a list of rules which can match a set of packets. Each rule specifies what to do with a packet that matches. This is called a `target', which may be a jump to a user-defined chain in the same table.\"* Okay so what does that mean? Basically, iptables are a rules-based system for controlling the flow of network traffic, and basically, every Linux system has it. This means that we can create routing rules to do almost anything we want from the command line. iptables as a Firewall Firewalls are similarly rules-based systems, but you probably think of them as some big system that keeps hackers out of a giant network, not just a single box. But a dirty secret of those expensive firewalls is that many of them rely on iptables under the hood. Let's play around with a couple one-liners to show the power. (and yeah, you'll need root) First, run $ iptables -L to see what rules are already configured. Most likely you are currently set up to accept all INPUTs, OUTPUTs, and FORWARDs by default. That's fine, but it's also fine if you've got some other rules going on. Docker and plenty of other programs set up their own iptables rules. So let's say we have a sensitive service running on port 1337 we don't want anyone to get access to. Let's add an iptables rule: $ iptables -A INPUT -p tcp --dport 1337 -j DROP Now when you run $ iptables -L you should see the rule Chain INPUT (policy ACCEPT)target prot opt source destinationDROP tcp -- anywhere anywhere tcp dpt:1337 Good luck connecting to that now! Try with netcat. Now to turn that rule off we can use $ sudo iptables -L --line-numbers which will give us a number in front of the rule (in this case 1) We can use that, coupled with the INPUT Chain name, to run $ sudo iptables -D INPUT 1 to delete the rule. Using -L will show that the rule is gone again. There are infinite iptables resources out there, but this is a good start. iptables for port forwarding I was going to write up a quick tutorial on this, but hey, you're an adult, just read a StackOverflow response like the rest of us real hackers. The goal here is to nc to one local port and connect to a nc listener on a different local port. SO: How to Do Local Port Forwarding For this assignment, submit anything you found difficult to understand and try to talk through it. Don't spend too much time on the assignment, the experimentation is the goal. Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"HackerStuff/3-MalwareCommandandControl.html":{"url":"HackerStuff/3-MalwareCommandandControl.html","title":"Malware Command and Control","keywords":"","body":"Malware Command and Control Malware usually needs to talk out of the network to do it's thing, and that's the perfect time for you to catch them. Command and Control is a critical part of the cyber killchain, and being a Wireshark killer is invaluable. This is my bread and butter. Follow this tutorial: Unit 42: Trickbot If you find yourself hopelessly addicted to malware C2 and want to get great at it check out the following resources: More from Unit 42 From the same person who wrote all the Unit 42 stuff, a ton more exercises are available For your assignment submit what the Trickbot malware was doing for C2 in the tutorial you followed. Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"HackerStuff/4-ManintheMiddleLab.html":{"url":"HackerStuff/4-ManintheMiddleLab.html","title":"Man in the Middle Lab","keywords":"","body":"Man in the Middle Lab Read this on a man-in-the-middle attack: Imperva: MITM Then follow this hands on tutorial: http://www.csc.villanova.edu/~enwafor/cps_security/documents/lab1_mitm_update.pdf For your assignment, submit anything you found interesting. If it doesn't work, let me know. Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"HackerStuff/5-ChapterSurvey6.html":{"url":"HackerStuff/5-ChapterSurvey6.html","title":"Chapter Survey 6","keywords":"","body":"Chapter Survey 6 On a scale of 0 to 10, how likely is it that you would recommend this section to a friend or colleague? Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"WhatNext/0-HowToGetReallyGood.html":{"url":"WhatNext/0-HowToGetReallyGood.html","title":"How To Get Really Good","keywords":"","body":"How To Get Really Good Like all good things, you just have to spend time doing this. I hand waved the hell out of most topics, so you probably should spend more time getting a deeper understanding of what all these things are, but at least you have the context now. If you are going for your Comptia Network+, or just want a legit deep dive into Networking, check out Professor Messer's Net+ Training. It is extremely high quality, and you are now prepared to get everything out of it. My favorite resource to actually understand sockets is https://beej.us/guide/bgnet/. This is critical stuff to understand how the operating system interacts with the networking stack, and if you're doing network programming, that is more important than whatever the network is doing with your packets when you throw them out into the ether. I am a huge fan of the Cyber Plumber's Handbook: https://github.com/opsdisk/the_cyber_plumbers_handbook Self-described as the definitive guide to Secure Shell (SSH) tunneling, port redirection, and bending traffic like a boss, this is the book that teaches you to be good at fancy footwork. Also very relevant for offensive security. Finally, the real answer to this is to setup more networks, set up more services, and mostly look at more pcaps. Whether it is just sitting around capturing your local network, looking at malware c2, CTF challenges, or some of these structured datasets, the more you get your eyes on, the better prepared you'll be to know normal. https://github.com/chrissanders/packets https://www.netresec.com/?page=PcapFiles Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"WhatNext/1-HomeLab.html":{"url":"WhatNext/1-HomeLab.html","title":"Home Lab","keywords":"","body":"Home Lab All those little labs on your own box are good, but the next step after attaining enough technical knowledge to be dangerous is to build a home lab. Once there are multiple computers you own in the mix throwing packets at eachother, the amount you can learn rapidly scales up. A home lab doesn’t mean you need server racks, just at least a computer that can run 2+ VMs at a time. This is the best resource on the topic by a significant margin: Building Virtual Machine Labs: A Hands-on Guide (Second Edition) . The author is absolutely awesome and is a supporter of this site. It is pay what you want, so pay what you want, and then set up everything that seems interesting, focusing on the security products. In this book you will set up a full network, along with Kali and Metasploitable. What is important is that you will learn how to use Metasploit, but only so that you can create good logs for your security monitoring setup. As I mentioned, I just want you looking at packets. Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"WhatNext/2-SEEDLabs.html":{"url":"WhatNext/2-SEEDLabs.html","title":"SEED Labs","keywords":"","body":"SEED Labs This is one of the best resources on the internet to learn about security and especially network security. They are criminally underappreciated. If you want to become a networking warlord, work through all of the Labs in here: https://seedsecuritylabs.org/Labs_20.04/Networking/ It will take a while but it is awesome material. Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"WhatNext/3-ChapterSurvey8.html":{"url":"WhatNext/3-ChapterSurvey8.html","title":"Chapter Survey 8","keywords":"","body":"Chapter Survey 8 On a scale of 0 to 10, how likely is it that you would recommend this section to a friend or colleague? Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"CTFChallenges/0-CTFMeta.html":{"url":"CTFChallenges/0-CTFMeta.html","title":"CTF Meta","keywords":"","body":"CTF Meta I am a huge fan CTF challenges for learning, mostly because it is fun and difficult. Those two things are pretty hard to do. Forensics challenges can include a number of elements mixed together such as: Network (pcap files or other traffic logs) Recon (identifying random things, people, locations) Anti-forensic techniques When looking through a network challenges, there are a few basic types of challenges you can expect to see. A file is transferred A conversation occurs between two addresses A hidden channel is used to send information Something occurred and you must follow a series of events to get to the final answer These challenges often involve adding another level of work beyond the initial discovery of the communication, whether adding stego, encoding, encryption or a custom network protocol. Usually, the most important thing to do in the majority of these challenges is to identify the attacked host, the attacking host, and then find the channel in between. This means using the Statistics Menu, Knowing Normal, and being able to scroll through packet captures for hours. Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"CTFChallenges/1-Challenge1.html":{"url":"CTFChallenges/1-Challenge1.html","title":"Challenge 1","keywords":"","body":"Challenge 1 Solve this forensics challenge using the write-up provided and submit a screenshot of your solution. a href=\"https://github.com/ctfs/write-ups-2015/tree/master/csaw-ctf-2015/forensics/transfer-100\" rel=\"noopener\" target=\"_blank\"https://github.com/ctfs/write-ups-2015/tree/master/csaw-ctf-2015/forensics/transfer-100 Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"CTFChallenges/2-Challenge2.html":{"url":"CTFChallenges/2-Challenge2.html","title":"Challenge 2","keywords":"","body":"Challenge 2 Solve this forensics challenge using the write-up provided and submit a screenshot of your solution. a href=\"https://medium.com/@marcellelee/ctf-challenge-walkthrough-network-traffic-analysis-rogue-user-f87ae923130\" rel=\"noopener\" target=\"_blank\"https://medium.com/@marcellelee/ctf-challenge-walkthrough-network-traffic-analysis-rogue-user-f87ae923130 Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"CTFChallenges/3-Challenge3.html":{"url":"CTFChallenges/3-Challenge3.html","title":"Challenge 3","keywords":"","body":"Challenge 3 Solve this forensics challenge using the write-up provided and submit a screenshot of your solution. a href=\"https://medium.com/@egg997/ihack-2019-fun-in-the-wireshark-world-writeup-61c4d09a441a\" rel=\"noopener\" target=\"_blank\"https://medium.com/@egg997/ihack-2019-fun-in-the-wireshark-world-writeup-61c4d09a441a Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"CTFChallenges/4-Challenge4.html":{"url":"CTFChallenges/4-Challenge4.html","title":"Challenge 4","keywords":"","body":"Challenge 4 Solve this forensics challenge using the write-up provided and submit a screenshot of your solution. a href=\"https://blogs.tunelko.com/2013/09/01/asis-ctf-simple-pcap-spcap-writeup/\" rel=\"noopener\" target=\"_blank\"https://blogs.tunelko.com/2013/09/01/asis-ctf-simple-pcap-spcap-writeup/ Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"CTFChallenges/5-Challenge5.html":{"url":"CTFChallenges/5-Challenge5.html","title":"Challenge 5","keywords":"","body":"Challenge 5 Solve this forensics challenge using the write-up provided and submit a screenshot of your solution. https://ctftime.org/writeup/10362 Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"CTFChallenges/6-Challenge6.html":{"url":"CTFChallenges/6-Challenge6.html","title":"Challenge 6","keywords":"","body":"Challenge 6 Solve this forensics challenge using the write-up provided and submit a screenshot of your solution. a href=\"https://github.com/ctfs/write-ups-2015/tree/master/ghost-in-the-shellcode-2015/forensics/cloudfs\" rel=\"noopener\" target=\"_blank\"https://github.com/ctfs/write-ups-2015/tree/master/ghost-in-the-shellcode-2015/forensics/cloudfs Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"CTFChallenges/7-Challenge7.html":{"url":"CTFChallenges/7-Challenge7.html","title":"Challenge 7","keywords":"","body":"Challenge 7 Solve this forensics challenge using the write-up provided and submit a screenshot of your solution. a href=\"https://github.com/ctfs/write-ups-2015/tree/master/hack-dat-kiwi-ctf-2015/forensics/ssl-sniff-2\" rel=\"noopener\" target=\"_blank\"https://github.com/ctfs/write-ups-2015/tree/master/hack-dat-kiwi-ctf-2015/forensics/ssl-sniff-2 Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"CTFChallenges/8-ThatsAllFolks.html":{"url":"CTFChallenges/8-ThatsAllFolks.html","title":"Thats All Folks","keywords":"","body":"That's All Folks Congratulations on finishing this course, now be excited to spend the rest of your career improving at this as you learn new things, and then forget them... over and over! You have the skills you need now to figure just about anything out, so go out there and get it. Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "},"CTFChallenges/9-ChapterSurvey7.html":{"url":"CTFChallenges/9-ChapterSurvey7.html","title":"Chapter Survey 7","keywords":"","body":"Chapter Survey 7 On a scale of 0 to 10, how likely is it that you would recommend this section to a friend or colleague? Hoppers Roppers 2024            Date： 2024-03-07 16:41:41 "}}